cmake_minimum_required(VERSION 3.0)
project(LearnOpenGL)
set(CMAKE_EXPORT_COMPILE_COMMANDS 1)
# if(WIN32)
#     add_compile_options(-Wall)
# else(WIN32)
#     add_compile_options(-std=c++11 -g -Wall)
# endif(WIN32)
include_directories(${PROJECT_SOURCE_DIR}/libs/glfw/include)
include_directories(${PROJECT_SOURCE_DIR}/libs/glm/include)
include_directories(${PROJECT_SOURCE_DIR}/libs/glad/include)
include_directories(${PROJECT_SOURCE_DIR}/libs)
aux_source_directory(./app/src MAIN_SRC)
aux_source_directory(./libs/glad/src GLAD_SRC)
aux_source_directory(./libs/stb_image STB_SRC)
source_group(src FILES ${MAIN_SRC})
source_group(glad FILES ${GLAD_SRC})
source_group(stb_image FILES ${STB_SRC})
add_executable(${PROJECT_NAME} ${MAIN_SRC} ${GLAD_SRC} ${STB_SRC})
# link_directories(./libs/glfw)
# find_library(GLFW_LIB_PATH glfw ./libs/glfw)
# if(NOT GLFW_LIB_PATH)
#     message(FATAL_ERROR "glfw not found")
# endif()
add_subdirectory(./libs/glfw)
target_link_libraries(${PROJECT_NAME} glfw)
# find_library(COCOA_FRAMEWORK Cocoa)
# if(NOT COCOA_FRAMEWORK)
#     message(FATAL_ERROR "Cocoa not found")
# endif()
# target_link_libraries(${PROJECT_NAME} ${COCOA_FRAMEWORK})
# find_library(IOKIT_FRAMEWORK IOKit)
# if(NOT IOKIT_FRAMEWORK)
#     message(FATAL_ERROR "IOKit not found")
# endif()
# target_link_libraries(${PROJECT_NAME} ${IOKIT_FRAMEWORK})
# find_library(COREFOUNDATION_FRAMEWORK CoreFoundation)
# if(NOT COREFOUNDATION_FRAMEWORK)
#     message(FATAL_ERROR "CoreFoundation not found")
# endif()
# target_link_libraries(${PROJECT_NAME} ${COREFOUNDATION_FRAMEWORK})
# find_library(COREVIDEO_FRAMEWORK CoreVideo)
# if(NOT COREVIDEO_FRAMEWORK)
#     message(FATAL_ERROR "CoreVideo not found")
# endif()
# target_link_libraries(${PROJECT_NAME} ${COREVIDEO_FRAMEWORK})

find_package(OpenGL REQUIRED)
target_include_directories(${PROJECT_NAME} PUBLIC ${OPENGL_INCLUDE_DIR})
target_link_libraries(${PROJECT_NAME} ${OPENGL_gl_LIBRARY})

if(CMAKE_SYSTEM_NAME MATCHES "Linux")
	target_link_libraries(${PROJECT_NAME} ${CMAKE_DL_LIBS})
endif(CMAKE_SYSTEM_NAME MATCHES "Linux")
